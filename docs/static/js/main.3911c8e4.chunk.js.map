{"version":3,"sources":["Components/Elements/AddCategory.jsx","helpers/getGifs.js","Components/Elements/GifGridItem.jsx","Components/Elements/GifGrid.jsx","hooks/useFetchGifs.js","Components/GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","value","setValue","onSubmit","e","preventDefault","length","cats","type","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","key","GifExpertApp","categories","item","index","ReactDOM","render","document","getElementById"],"mappings":"qMAiCeA,EA9BI,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,cAAiB,EAERC,mBAAS,IAFD,mBAE3BC,EAF2B,KAEpBC,EAFoB,KAkBlC,OACI,0BAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACCJ,EAAMK,OAAO,IACZP,GAAc,SAAAQ,GAAI,OAAGN,GAAH,mBAAYM,OAC9BL,EAAS,OAOT,4CACA,2BAAOM,KAAK,OAAOP,MAAOA,EAAOQ,SAjBjB,SAACL,GACrBF,EAASE,EAAEM,OAAOT,Y,uBCRbU,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEiCC,UAAUH,GAF3C,+DAIDI,MAAMF,GAJL,cAIbG,EAJa,gBAKCA,EAAKC,OALN,uBAKZC,EALY,EAKZA,KAEDC,EAAMD,EAAKE,KAAI,SAAAC,GAAM,IAAD,EACtB,MAAM,CACFC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAgBZM,GAhBY,4CAAH,sDCaLO,EAVI,SAAC,GAAiB,EAAhBJ,GAAiB,IAAdC,EAAa,EAAbA,MAAMV,EAAO,EAAPA,IAE1B,OACI,yBAAKc,UAAU,4DACX,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KCiBDO,EApBC,SAAC,GAAe,IAAdnB,EAAa,EAAbA,SAAa,ECFJ,SAACA,GAAY,IAAD,EACTZ,mBAAS,CAC/BmB,KAAK,GACLa,SAAQ,IAHuB,mBAC5BC,EAD4B,KACrBC,EADqB,KAqBnC,OAfAC,qBAAU,WACNxB,EAAQC,GAAUwB,MAAK,SAAAC,GACvBC,YAAW,WACPJ,EAAS,CACLf,KAAKkB,EACLL,SAAQ,MAEb,UAKL,CAACpB,IAGIqB,EDjBcM,CAAa3B,GAA3BO,EAFoB,EAEpBA,KAAKa,EAFe,EAEfA,QAEX,OACG,oCACI,4BAAKpB,GACJoB,GAAS,0CACV,yBAAKJ,UAAU,aAEXT,EAAKE,KAAI,SAACC,GAAD,OACL,kBAAC,EAAD,eAAakB,IAAKlB,EAAIC,IAAQD,UEmBnCmB,EA/BM,WAAO,IAAD,EAGUzC,mBAAS,CACvC,gBAJoB,mBAGhB0C,EAHgB,KAGL3C,EAHK,KAQvB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BAEQ2C,EAAWrB,KAAI,SAACsB,EAAKC,GAAN,OACf,kBAAC,EAAD,CAASJ,IAAKI,EAAMD,EAAM/B,SAAU+B,U,MCdxDE,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.3911c8e4.chunk.js","sourcesContent":["import React ,{useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory =({setCategories})=>{\r\n\r\n    const [value, setValue] = useState('');\r\n    \r\n    const handleInputValue =(e)=>{\r\n        setValue(e.target.value);\r\n        \r\n    };\r\n\r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault();\r\n        if(value.length>2){\r\n            setCategories(cats=>[value,...cats]);\r\n            setValue(\"\");\r\n        }\r\n        \r\n    };\r\n\r\n    return(\r\n        <form onSubmit={handleSubmit}>\r\n            <h2>Add Category</h2>\r\n            <input type=\"text\" value={value} onChange={handleInputValue} />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes={\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;","export const getGifs = async (category) => {\r\n        \r\n    const url=`https://api.giphy.com/v1/gifs/search?q=${encodeURI(category) }&limit=10&api_key=YWz9moFqxU92AgcV57pvkD3TOAn66qUv`; \r\n\r\n    const resp= await fetch(url);\r\n    const {data}= await resp.json();\r\n\r\n    const gifs =data.map(img=>{\r\n        return{\r\n            id:img.id,\r\n            title:img.title,\r\n            url: img.images?.downsized_medium.url,\r\n        }\r\n    })\r\n\r\n    \r\n    return gifs;\r\n}","import React from 'react';\r\n\r\n\r\nconst GifGridItem =({id,title,url})=>{\r\n\r\n    return(\r\n        <div className=\"card animate__animated animate__bounce animate__delay-2s\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GifGridItem;","import React  from 'react';\r\nimport { useFetchGifs } from '../../hooks/useFetchGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\n\r\nconst GifGrid = ({category}) =>{\r\n\r\n    const {data,loading}=useFetchGifs(category);\r\n\r\n     return(\r\n        <>\r\n            <h3>{category}</h3>\r\n            {loading&&<p>Cargando...</p>}\r\n            <div className=\"card-grid\" >            \r\n                {\r\n                data.map((img)=>(\r\n                    <GifGridItem key={img.id} {...img} />                   \r\n\r\n                ))\r\n                }        \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid;","import { useState,useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs =(category)=>{\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n\r\n    useEffect(()=>{\r\n        getGifs(category).then(imgs=>{\r\n        setTimeout(() => {\r\n            setState({\r\n                data:imgs,\r\n                loading:false,\r\n            })            \r\n        }, 3000);\r\n\r\n        });     \r\n        \r\n\r\n    },[category])\r\n\r\n    \r\n    return state;\r\n    \r\n\r\n}","import React,{ useState} from 'react';\r\nimport AddCategory from './Elements/AddCategory';\r\nimport GifGrid from './Elements/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    \r\n    const [categories,setCategories]=useState([\r\n       \"Dragon Ball\"\r\n    ]);\r\n\r\n\r\n    return(\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr/>\r\n\r\n            <ol>\r\n                {\r\n                    categories.map((item,index)=>(\r\n                    <GifGrid key={index+item} category={item} />    \r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './Components/GifExpertApp';\nimport './index.css';\n\n\n\nReactDOM.render(\n  \n    <GifExpertApp></GifExpertApp>,\n\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}